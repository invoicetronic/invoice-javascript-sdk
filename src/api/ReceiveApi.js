/**
 * Italian eInvoice API
 * The Italian eInvoice API is a RESTful API that allows you to send and receive invoices through the Italian [Servizio di Interscambio (SDI)][1], or Interchange Service. The API is designed by Invoicetronic to be simple and easy to use, abstracting away SDI complexity while still providing complete control over the invoice send/receive process. The API also provides advanced features and a rich toolchain, such as invoice validation, multiple upload methods, webhooks, event logs, CORS support, client SDKs for commonly used languages, and CLI tools.  For more information, see  [Invoicetronic website][2]  [1]: https://www.fatturapa.gov.it/it/sistemainterscambio/cose-il-sdi/ [2]: https://invoicetronic.com/
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@invoicetronic.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ProblemDetails from '../model/ProblemDetails';
import Receive from '../model/Receive';

/**
* Receive service.
* @module api/ReceiveApi
* @version 1.0.0
*/
export default class ReceiveApi {

    /**
    * Constructs a new ReceiveApi. 
    * @alias module:api/ReceiveApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * List incoming invoices
     * Receive invoices are the invoices that are received from other companies.
     * @param {Object} opts Optional parameters
     * @param {Number} [companyId] Company id.
     * @param {String} [identifier] SDI identifier.
     * @param {Boolean} [unread] Unread items only.
     * @param {String} [committente] VAT number or fiscal code.
     * @param {String} [prestatore] VAT number or fiscal code.
     * @param {String} [fileName] File name.
     * @param {Date} [lastUpdateFrom] UTC ISO 8601 (2024-11-29T12:34:56Z)
     * @param {Date} [lastUpdateTo] UTC ISO 8601 (2024-11-29T12:34:56Z)
     * @param {Date} [dateSentFrom] UTC ISO 8601 (2024-11-29T12:34:56Z)
     * @param {Date} [dateSentTo] UTC ISO 8601 (2024-11-29T12:34:56Z)
     * @param {Date} [documentDateFrom] UTC ISO 8601 (2024-11-29T12:34:56Z)
     * @param {Date} [documentDateTo] UTC ISO 8601 (2024-11-29T12:34:56Z)
     * @param {String} [documentNumber] Document number.
     * @param {Number} [page = 1)] Page number.
     * @param {Number} [pageSize = 100)] Items per page.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Receive>} and HTTP response
     */
    invoiceV1ReceiveGetWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'company_id': opts['companyId'],
        'identifier': opts['identifier'],
        'unread': opts['unread'],
        'committente': opts['committente'],
        'prestatore': opts['prestatore'],
        'file_name': opts['fileName'],
        'last_update_from': opts['lastUpdateFrom'],
        'last_update_to': opts['lastUpdateTo'],
        'date_sent_from': opts['dateSentFrom'],
        'date_sent_to': opts['dateSentTo'],
        'document_date_from': opts['documentDateFrom'],
        'document_date_to': opts['documentDateTo'],
        'document_number': opts['documentNumber'],
        'page': opts['page'],
        'page_size': opts['pageSize']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/problem+json'];
      let returnType = [Receive];
      return this.apiClient.callApi(
        '/invoice/v1/receive', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List incoming invoices
     * Receive invoices are the invoices that are received from other companies.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.companyId Company id.
     * @param {String} opts.identifier SDI identifier.
     * @param {Boolean} opts.unread Unread items only.
     * @param {String} opts.committente VAT number or fiscal code.
     * @param {String} opts.prestatore VAT number or fiscal code.
     * @param {String} opts.fileName File name.
     * @param {Date} opts.lastUpdateFrom UTC ISO 8601 (2024-11-29T12:34:56Z)
     * @param {Date} opts.lastUpdateTo UTC ISO 8601 (2024-11-29T12:34:56Z)
     * @param {Date} opts.dateSentFrom UTC ISO 8601 (2024-11-29T12:34:56Z)
     * @param {Date} opts.dateSentTo UTC ISO 8601 (2024-11-29T12:34:56Z)
     * @param {Date} opts.documentDateFrom UTC ISO 8601 (2024-11-29T12:34:56Z)
     * @param {Date} opts.documentDateTo UTC ISO 8601 (2024-11-29T12:34:56Z)
     * @param {String} opts.documentNumber Document number.
     * @param {Number} opts.page Page number. (default to 1)
     * @param {Number} opts.pageSize Items per page. (default to 100)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Receive>}
     */
    invoiceV1ReceiveGet(opts) {
      return this.invoiceV1ReceiveGetWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete an incoming invoice by id
     * Receive invoices are the invoices that are received from other companies.
     * @param {Number} id Item id.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Receive} and HTTP response
     */
    invoiceV1ReceiveIdDeleteWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling invoiceV1ReceiveIdDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Receive;
      return this.apiClient.callApi(
        '/invoice/v1/receive/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete an incoming invoice by id
     * Receive invoices are the invoices that are received from other companies.
     * @param {Number} id Item id.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Receive}
     */
    invoiceV1ReceiveIdDelete(id) {
      return this.invoiceV1ReceiveIdDeleteWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get an incoming invoice by id
     * Receive invoices are the invoices that are received from other companies.
     * @param {Number} id Item id.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Receive} and HTTP response
     */
    invoiceV1ReceiveIdGetWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling invoiceV1ReceiveIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Receive;
      return this.apiClient.callApi(
        '/invoice/v1/receive/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get an incoming invoice by id
     * Receive invoices are the invoices that are received from other companies.
     * @param {Number} id Item id.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Receive}
     */
    invoiceV1ReceiveIdGet(id) {
      return this.invoiceV1ReceiveIdGetWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
