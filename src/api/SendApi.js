/**
 * Italian eInvoice API
 * The Italian eInvoice API is a RESTful API that allows you to send and receive invoices through the Italian [Servizio di Interscambio (SDI)][1], or Interchange Service. The API is designed by Invoicetronic to be simple and easy to use, abstracting away SDI complexity while providing complete control over the invoice send/receive process. The API also provides advanced features as encryption at rest, invoice validation, multiple upload formats, webhooks, event logging, client SDKs for commonly used languages, and CLI tools.  For more information, see  [Invoicetronic website][2]  [1]: https://www.fatturapa.gov.it/it/sistemainterscambio/cose-il-sdi/ [2]: https://invoicetronic.com/
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@invoicetronic.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import FatturaOrdinaria from '../model/FatturaOrdinaria';
import ProblemHttpResult from '../model/ProblemHttpResult';
import Send from '../model/Send';

/**
* Send service.
* @module api/SendApi
* @version 1.0.0
*/
export default class SendApi {

    /**
    * Constructs a new SendApi. 
    * @alias module:api/SendApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Add an invoice by file
     * Send invoices are the invoices that are sent to the SDI.
     * @param {Array.<File>} files 
     * @param {Object} opts Optional parameters
     * @param {Boolean} [validate = false)] Validate the document first, and reject it on failure.
     * @param {module:model/String} [signature = 'Auto')] Whether to digitally sign the document.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Send} and HTTP response
     */
    invoiceV1SendFilesPostWithHttpInfo(files, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'files' is set
      if (files === undefined || files === null) {
        throw new Error("Missing the required parameter 'files' when calling invoiceV1SendFilesPost");
      }

      let pathParams = {
      };
      let queryParams = {
        'validate': opts['validate'],
        'signature': opts['signature']
      };
      let headerParams = {
      };
      let formParams = {
        'files': this.apiClient.buildCollectionParam(files, 'passthrough')
      };

      let authNames = ['Basic'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = Send;
      return this.apiClient.callApi(
        '/invoice/v1/send/files', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Add an invoice by file
     * Send invoices are the invoices that are sent to the SDI.
     * @param {Array.<File>} files 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.validate Validate the document first, and reject it on failure. (default to false)
     * @param {module:model/String} opts.signature Whether to digitally sign the document. (default to 'Auto')
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Send}
     */
    invoiceV1SendFilesPost(files, opts) {
      return this.invoiceV1SendFilesPostWithHttpInfo(files, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List invoices
     * test **markdown**.
     * @param {Object} opts Optional parameters
     * @param {Number} [companyId] Company id
     * @param {String} [identifier] SDI identifier.
     * @param {String} [committente] Vat number or fiscal code.
     * @param {String} [prestatore] Vat number or fiscal code.
     * @param {String} [fileName] File name.
     * @param {Date} [lastUpdateFrom] UTC ISO 8601 (2024-11-29T12:34:56Z)
     * @param {Date} [lastUpdateTo] UTC ISO 8601 (2024-11-29T12:34:56Z)
     * @param {Date} [dateSentFrom] UTC ISO 8601 (2024-11-29T12:34:56Z)
     * @param {Date} [dateSentTo] UTC ISO 8601 (2024-11-29T12:34:56Z)
     * @param {Date} [documentDateFrom] UTC ISO 8601 (2024-11-29T12:34:56Z)
     * @param {Date} [documentDateTo] UTC ISO 8601 (2024-11-29T12:34:56Z)
     * @param {String} [documentNumber] Document number.
     * @param {Number} [page = 1)] Page number. Defaults to 1.
     * @param {Number} [pageSize = 100)] Items per page. Defaults to 50. Cannot be greater than 200.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Send>} and HTTP response
     */
    invoiceV1SendGetWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'company_id': opts['companyId'],
        'identifier': opts['identifier'],
        'committente': opts['committente'],
        'prestatore': opts['prestatore'],
        'file_name': opts['fileName'],
        'last_update_from': opts['lastUpdateFrom'],
        'last_update_to': opts['lastUpdateTo'],
        'date_sent_from': opts['dateSentFrom'],
        'date_sent_to': opts['dateSentTo'],
        'document_date_from': opts['documentDateFrom'],
        'document_date_to': opts['documentDateTo'],
        'document_number': opts['documentNumber'],
        'page': opts['page'],
        'page_size': opts['pageSize']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Send];
      return this.apiClient.callApi(
        '/invoice/v1/send', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List invoices
     * test **markdown**.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.companyId Company id
     * @param {String} opts.identifier SDI identifier.
     * @param {String} opts.committente Vat number or fiscal code.
     * @param {String} opts.prestatore Vat number or fiscal code.
     * @param {String} opts.fileName File name.
     * @param {Date} opts.lastUpdateFrom UTC ISO 8601 (2024-11-29T12:34:56Z)
     * @param {Date} opts.lastUpdateTo UTC ISO 8601 (2024-11-29T12:34:56Z)
     * @param {Date} opts.dateSentFrom UTC ISO 8601 (2024-11-29T12:34:56Z)
     * @param {Date} opts.dateSentTo UTC ISO 8601 (2024-11-29T12:34:56Z)
     * @param {Date} opts.documentDateFrom UTC ISO 8601 (2024-11-29T12:34:56Z)
     * @param {Date} opts.documentDateTo UTC ISO 8601 (2024-11-29T12:34:56Z)
     * @param {String} opts.documentNumber Document number.
     * @param {Number} opts.page Page number. Defaults to 1. (default to 1)
     * @param {Number} opts.pageSize Items per page. Defaults to 50. Cannot be greater than 200. (default to 100)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Send>}
     */
    invoiceV1SendGet(opts) {
      return this.invoiceV1SendGetWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a invoice by id
     * Send invoices are the invoices that are sent to the SDI.
     * @param {Number} id Item id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Send} and HTTP response
     */
    invoiceV1SendIdGetWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling invoiceV1SendIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Send;
      return this.apiClient.callApi(
        '/invoice/v1/send/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get a invoice by id
     * Send invoices are the invoices that are sent to the SDI.
     * @param {Number} id Item id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Send}
     */
    invoiceV1SendIdGet(id) {
      return this.invoiceV1SendIdGetWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Add an invoice by json
     * Send invoices are the invoices that are sent to the SDI.
     * @param {module:model/FatturaOrdinaria} fatturaOrdinaria 
     * @param {Object} opts Optional parameters
     * @param {Boolean} [validate = false)] Validate the document first, and reject it on failure.
     * @param {module:model/String} [signature = 'Auto')] Whether to digitally sign the document.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Send} and HTTP response
     */
    invoiceV1SendJsonPostWithHttpInfo(fatturaOrdinaria, opts) {
      opts = opts || {};
      let postBody = fatturaOrdinaria;
      // verify the required parameter 'fatturaOrdinaria' is set
      if (fatturaOrdinaria === undefined || fatturaOrdinaria === null) {
        throw new Error("Missing the required parameter 'fatturaOrdinaria' when calling invoiceV1SendJsonPost");
      }

      let pathParams = {
      };
      let queryParams = {
        'validate': opts['validate'],
        'signature': opts['signature']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Send;
      return this.apiClient.callApi(
        '/invoice/v1/send/json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Add an invoice by json
     * Send invoices are the invoices that are sent to the SDI.
     * @param {module:model/FatturaOrdinaria} fatturaOrdinaria 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.validate Validate the document first, and reject it on failure. (default to false)
     * @param {module:model/String} opts.signature Whether to digitally sign the document. (default to 'Auto')
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Send}
     */
    invoiceV1SendJsonPost(fatturaOrdinaria, opts) {
      return this.invoiceV1SendJsonPostWithHttpInfo(fatturaOrdinaria, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Add an invoice
     * Send invoices are the invoices that are sent to the SDI.
     * @param {module:model/Send} send 
     * @param {Object} opts Optional parameters
     * @param {Boolean} [validate = false)] Validate the document first, and reject it on failure.
     * @param {module:model/String} [signature = 'Auto')] Whether to digitally sign the document.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Send} and HTTP response
     */
    invoiceV1SendPostWithHttpInfo(send, opts) {
      opts = opts || {};
      let postBody = send;
      // verify the required parameter 'send' is set
      if (send === undefined || send === null) {
        throw new Error("Missing the required parameter 'send' when calling invoiceV1SendPost");
      }

      let pathParams = {
      };
      let queryParams = {
        'validate': opts['validate'],
        'signature': opts['signature']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Send;
      return this.apiClient.callApi(
        '/invoice/v1/send', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Add an invoice
     * Send invoices are the invoices that are sent to the SDI.
     * @param {module:model/Send} send 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.validate Validate the document first, and reject it on failure. (default to false)
     * @param {module:model/String} opts.signature Whether to digitally sign the document. (default to 'Auto')
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Send}
     */
    invoiceV1SendPost(send, opts) {
      return this.invoiceV1SendPostWithHttpInfo(send, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Validate an invoice by file
     * Send invoices are the invoices that are sent to the SDI.
     * @param {Array.<File>} files 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    invoiceV1SendValidateFilesPostWithHttpInfo(files) {
      let postBody = null;
      // verify the required parameter 'files' is set
      if (files === undefined || files === null) {
        throw new Error("Missing the required parameter 'files' when calling invoiceV1SendValidateFilesPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'files': this.apiClient.buildCollectionParam(files, 'passthrough')
      };

      let authNames = ['Basic'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/invoice/v1/send/validate/files', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Validate an invoice by file
     * Send invoices are the invoices that are sent to the SDI.
     * @param {Array.<File>} files 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    invoiceV1SendValidateFilesPost(files) {
      return this.invoiceV1SendValidateFilesPostWithHttpInfo(files)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Validate an invoice by json
     * Send invoices are the invoices that are sent to the SDI.
     * @param {module:model/FatturaOrdinaria} fatturaOrdinaria 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    invoiceV1SendValidateJsonPostWithHttpInfo(fatturaOrdinaria) {
      let postBody = fatturaOrdinaria;
      // verify the required parameter 'fatturaOrdinaria' is set
      if (fatturaOrdinaria === undefined || fatturaOrdinaria === null) {
        throw new Error("Missing the required parameter 'fatturaOrdinaria' when calling invoiceV1SendValidateJsonPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/invoice/v1/send/validate/json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Validate an invoice by json
     * Send invoices are the invoices that are sent to the SDI.
     * @param {module:model/FatturaOrdinaria} fatturaOrdinaria 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    invoiceV1SendValidateJsonPost(fatturaOrdinaria) {
      return this.invoiceV1SendValidateJsonPostWithHttpInfo(fatturaOrdinaria)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Validate an invoice
     * Send invoices are the invoices that are sent to the SDI.
     * @param {module:model/Send} send 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    invoiceV1SendValidatePostWithHttpInfo(send) {
      let postBody = send;
      // verify the required parameter 'send' is set
      if (send === undefined || send === null) {
        throw new Error("Missing the required parameter 'send' when calling invoiceV1SendValidatePost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/invoice/v1/send/validate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Validate an invoice
     * Send invoices are the invoices that are sent to the SDI.
     * @param {module:model/Send} send 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    invoiceV1SendValidatePost(send) {
      return this.invoiceV1SendValidatePostWithHttpInfo(send)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Validate an invoice by xml
     * Send invoices are the invoices that are sent to the SDI.
     * @param {module:model/FatturaOrdinaria} fatturaOrdinaria 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    invoiceV1SendValidateXmlPostWithHttpInfo(fatturaOrdinaria) {
      let postBody = fatturaOrdinaria;
      // verify the required parameter 'fatturaOrdinaria' is set
      if (fatturaOrdinaria === undefined || fatturaOrdinaria === null) {
        throw new Error("Missing the required parameter 'fatturaOrdinaria' when calling invoiceV1SendValidateXmlPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = ['application/xml'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/invoice/v1/send/validate/xml', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Validate an invoice by xml
     * Send invoices are the invoices that are sent to the SDI.
     * @param {module:model/FatturaOrdinaria} fatturaOrdinaria 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    invoiceV1SendValidateXmlPost(fatturaOrdinaria) {
      return this.invoiceV1SendValidateXmlPostWithHttpInfo(fatturaOrdinaria)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Add an invoice by xml
     * Send invoices are the invoices that are sent to the SDI.
     * @param {module:model/FatturaOrdinaria} fatturaOrdinaria 
     * @param {Object} opts Optional parameters
     * @param {Boolean} [validate = false)] Validate the document first, and reject it on failure.
     * @param {module:model/String} [signature = 'Auto')] Whether to digitally sign the document.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Send} and HTTP response
     */
    invoiceV1SendXmlPostWithHttpInfo(fatturaOrdinaria, opts) {
      opts = opts || {};
      let postBody = fatturaOrdinaria;
      // verify the required parameter 'fatturaOrdinaria' is set
      if (fatturaOrdinaria === undefined || fatturaOrdinaria === null) {
        throw new Error("Missing the required parameter 'fatturaOrdinaria' when calling invoiceV1SendXmlPost");
      }

      let pathParams = {
      };
      let queryParams = {
        'validate': opts['validate'],
        'signature': opts['signature']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = ['application/xml'];
      let accepts = ['application/json'];
      let returnType = Send;
      return this.apiClient.callApi(
        '/invoice/v1/send/xml', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Add an invoice by xml
     * Send invoices are the invoices that are sent to the SDI.
     * @param {module:model/FatturaOrdinaria} fatturaOrdinaria 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.validate Validate the document first, and reject it on failure. (default to false)
     * @param {module:model/String} opts.signature Whether to digitally sign the document. (default to 'Auto')
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Send}
     */
    invoiceV1SendXmlPost(fatturaOrdinaria, opts) {
      return this.invoiceV1SendXmlPostWithHttpInfo(fatturaOrdinaria, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
